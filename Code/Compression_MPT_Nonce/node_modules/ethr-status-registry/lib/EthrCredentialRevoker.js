"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthrCredentialRevoker = void 0;
var configuration_1 = require("./configuration");
var EthrStatusRegistry_1 = require("./EthrStatusRegistry");
var ExternalSignerProvider_1 = require("./ExternalSignerProvider");
var did_jwt_1 = require("did-jwt");
var contracts_1 = require("@ethersproject/contracts");
var strings_1 = require("@ethersproject/strings");
var keccak256_1 = require("@ethersproject/keccak256");
var revocation_registry_1 = require("revocation-registry");
// experimental API, expect breaking changes
var EthrCredentialRevoker = /** @class */ (function () {
    function EthrCredentialRevoker(conf) {
        this.networks = {};
        this.networks = configuration_1.configureResolverWithNetworks(conf);
    }
    EthrCredentialRevoker.prototype.revoke = function (token, ethSign, txOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var decoded, statusEntry, registryCoord, network, registryAddress, web3Provider, provider, registryContract, tokenBytes, hash, _a, gasPrice, gasLimit, nonce, txOverrides, result, e_1, err;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        decoded = did_jwt_1.decodeJWT(token);
                        statusEntry = decoded.payload.credentialStatus;
                        if (!statusEntry) {
                            throw new Error('credential_not_revocable; no status field embedded');
                        }
                        if (statusEntry.type !== EthrStatusRegistry_1.methodName) {
                            throw new Error('unsupported_revocation_method; only EthrStatusRegistry2019 is supported');
                        }
                        registryCoord = statusEntry.id.split(':');
                        if (registryCoord.length !== 2) {
                            throw new Error('credential_not_revocable; malformed `id` field in credential status entry');
                        }
                        network = registryCoord[0];
                        registryAddress = registryCoord[1];
                        web3Provider = this.networks[network];
                        if (!web3Provider) {
                            throw new Error("credential_not_revocable; no known way to access network(" + network + ") used in credential status entry. Check your providerConfig configuration");
                        }
                        provider = web3Provider;
                        if (ethSign) {
                            provider = new ExternalSignerProvider_1.ExternalSignerProvider(ethSign, provider);
                        }
                        registryContract = new contracts_1.Contract(registryAddress, revocation_registry_1.abi, provider);
                        tokenBytes = strings_1.toUtf8Bytes(token);
                        hash = keccak256_1.keccak256(tokenBytes);
                        _a = __assign({}, txOptions), gasPrice = _a.gasPrice, gasLimit = _a.gasLimit, nonce = _a.nonce;
                        txOverrides = {
                            gasLimit: gasLimit || 44309,
                            gasPrice: gasPrice || 1000000000,
                            nonce: nonce
                        };
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, registryContract.revoke(hash, txOverrides)];
                    case 2:
                        result = _b.sent();
                        return [2 /*return*/, result.hash];
                    case 3:
                        e_1 = _b.sent();
                        if (e_1.transaction && /VM Exception while processing transaction: revert/.test(e_1.message)) {
                            err = new Error('credential_already_revoked');
                            err.cause = e_1;
                            throw err;
                        }
                        else {
                            throw e_1;
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return EthrCredentialRevoker;
}());
exports.EthrCredentialRevoker = EthrCredentialRevoker;
//# sourceMappingURL=EthrCredentialRevoker.js.map