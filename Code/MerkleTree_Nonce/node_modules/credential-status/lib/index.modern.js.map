{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["import { decodeJWT } from 'did-jwt'\nimport { DIDDocument } from 'did-resolver'\n\n/**\n * Represents the result of a status check\n */\nexport interface CredentialStatus {\n  revoked?: boolean\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\n/**\n * Represents a status method entry that could be embedded in a W3C Verifiable Credential.\n * Normally, only credentials that list a status method would need to be verified by it.\n *\n * ex:\n * ```json\n * status : { type: \"EthrStatusRegistry2019\", id: \"rinkeby:0xregistryAddress\" }\n * ```\n */\nexport interface StatusEntry {\n  type: string\n  id: string\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\n/**\n * [draft] The interface expected for status resolvers.\n * `checkStatus` should be called with a raw credential and it should Promise a [[CredentialStatus]] result.\n * It is advisable that classes that implement this interface also provide a way to easily register the correct\n * Status method type.\n *\n * Example:\n * ```typescript\n *  class CredentialStatusList2017 implements StatusResolver {\n *    checkStatus: StatusMethod = async (credential: string) => {\n *      // ...your implementation here\n *    }\n *    asStatusMethod = {\"CredentialStatusList2017\" : this.checkStatus}\n *  }\n * ```\n */\nexport interface StatusResolver {\n  checkStatus: StatusMethod\n}\n\n/**\n * The method signature expected to be implemented by credential status resolvers\n */\nexport type StatusMethod = (credential: string, didDoc: DIDDocument) => Promise<null | CredentialStatus>\n\ninterface JWTPayloadWithStatus {\n  credentialStatus?: StatusEntry\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\ninterface StatusMethodRegistry {\n  [type: string]: StatusMethod\n}\n\n/**\n * [draft] An implementation of a StatusMethod that can aggregate multiple other methods.\n * It calls the appropriate method based on the `status.type` specified in the credential.\n */\nexport class Status implements StatusResolver {\n  private registry: StatusMethodRegistry\n\n  /**\n   * All the expected StatusMethods should be registered during construction.\n   * Example:\n   * ```typescript\n   * const status = new Status({\n   *   ...new EthrStatusRegistry(config).asStatusMethod,                       //using convenience method\n   *   \"CredentialStatusList2017\": new CredentialStatusList2017().checkStatus, //referencing a checkStatus\n   * implementation\n   *   \"CustomStatusChecker\": customStatusCheckerMethod                        //directly referencing an independent\n   * method\n   * })\n   * ```\n   */\n  constructor(registry: StatusMethodRegistry = {}) {\n    this.registry = registry\n  }\n\n  async checkStatus(credential: string, didDoc: DIDDocument): Promise<null | CredentialStatus> {\n    // TODO: validate the credential to be VerifiableCredential or VerifiablePresentation\n    const decoded = decodeJWT(credential)\n    const statusEntry = (decoded.payload as JWTPayloadWithStatus).credentialStatus\n\n    if (typeof statusEntry === 'undefined') {\n      return {}\n    }\n\n    const method = this.registry[statusEntry.type]\n\n    if (typeof method !== 'undefined' && method != null) {\n      return method(credential, didDoc)\n    } else {\n      return {\n        // Once the credential status mechanisms in W3C get more stable, perhaps this can become a `reject`\n        error: `Credential status method ${statusEntry.type} unknown. Validity can not be determined.`,\n      }\n    }\n  }\n}\n"],"names":["Status","constructor","registry","checkStatus","credential","didDoc","decoded","decodeJWT","statusEntry","payload","credentialStatus","method","type","error"],"mappings":";;AAkEA;;;;;MAIaA;AAGX;;;;;;;;;;;;;AAaAC,EAAAA,YAAYC,WAAiC;SAfrCA;AAgBN,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;AAEgB,QAAXC,WAAW,CAACC,UAAD,EAAqBC,MAArB;AACf;AACA,UAAMC,OAAO,GAAGC,SAAS,CAACH,UAAD,CAAzB;AACA,UAAMI,WAAW,GAAIF,OAAO,CAACG,OAAR,CAAyCC,gBAA9D;;AAEA,QAAI,OAAOF,WAAP,KAAuB,WAA3B,EAAwC;AACtC,aAAO,EAAP;AACD;;AAED,UAAMG,MAAM,GAAG,KAAKT,QAAL,CAAcM,WAAW,CAACI,IAA1B,CAAf;;AAEA,QAAI,OAAOD,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,IAAI,IAA/C,EAAqD;AACnD,aAAOA,MAAM,CAACP,UAAD,EAAaC,MAAb,CAAb;AACD,KAFD,MAEO;AACL,aAAO;AACL;AACAQ,QAAAA,KAAK,8BAA8BL,WAAW,CAACI;AAF1C,OAAP;AAID;AACF;;;;;;"}