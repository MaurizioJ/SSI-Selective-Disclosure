import { decodeJWT } from 'did-jwt';

/**
 * [draft] An implementation of a StatusMethod that can aggregate multiple other methods.
 * It calls the appropriate method based on the `status.type` specified in the credential.
 */

class Status {
  /**
   * All the expected StatusMethods should be registered during construction.
   * Example:
   * ```typescript
   * const status = new Status({
   *   ...new EthrStatusRegistry(config).asStatusMethod,                       //using convenience method
   *   "CredentialStatusList2017": new CredentialStatusList2017().checkStatus, //referencing a checkStatus
   * implementation
   *   "CustomStatusChecker": customStatusCheckerMethod                        //directly referencing an independent
   * method
   * })
   * ```
   */
  constructor(registry = {}) {
    this.registry = void 0;
    this.registry = registry;
  }

  async checkStatus(credential, didDoc) {
    // TODO: validate the credential to be VerifiableCredential or VerifiablePresentation
    const decoded = decodeJWT(credential);
    const statusEntry = decoded.payload.credentialStatus;

    if (typeof statusEntry === 'undefined') {
      return {};
    }

    const method = this.registry[statusEntry.type];

    if (typeof method !== 'undefined' && method != null) {
      return method(credential, didDoc);
    } else {
      return {
        // Once the credential status mechanisms in W3C get more stable, perhaps this can become a `reject`
        error: `Credential status method ${statusEntry.type} unknown. Validity can not be determined.`
      };
    }
  }

}

export { Status };
//# sourceMappingURL=index.modern.js.map
