import { Signer } from '@ethersproject/abstract-signer';
import { Provider, TransactionRequest, TransactionResponse } from '@ethersproject/providers';
import { Deferrable } from '@ethersproject/properties';
import { Bytes } from '@ethersproject/bytes';
export declare type SignerMethod = (rawTx: any, cb: (err: any, signedTx: string) => void) => void;
export declare class ExternalSignerProvider extends Signer {
    connect(provider: Provider): Signer;
    private ethSign?;
    constructor(ethSign: SignerMethod, provider: Provider);
    sign(transaction: TransactionRequest): Promise<string>;
    getAddress(): Promise<string>;
    signMessage(message: Bytes | string): Promise<string>;
    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;
    sendTransaction(transaction: TransactionRequest): Promise<TransactionResponse>;
    private signRaw;
}
