import { DIDDocument } from 'did-resolver';
import { CredentialStatus, StatusMethod, StatusResolver, StatusEntry } from 'credential-status';
import { InfuraConfiguration, MultiProviderConfiguration } from './configuration';
export interface JWTDecodedExtended {
    status?: StatusEntry;
    [key: string]: any;
}
interface MethodMapping {
    [methodName: string]: StatusMethod;
}
export declare const methodName = "EthrStatusRegistry2019";
export declare class EthrStatusRegistry implements StatusResolver {
    static filterDocForAddresses(didDoc: DIDDocument): string[];
    asStatusMethod: MethodMapping;
    private networks;
    constructor(conf: InfuraConfiguration | MultiProviderConfiguration);
    checkStatus(credential: string, didDoc: DIDDocument): Promise<null | CredentialStatus>;
    parseRegistryId(id: string): [string, string];
    private runCredentialCheck;
    private parseRevokers;
}
export {};
